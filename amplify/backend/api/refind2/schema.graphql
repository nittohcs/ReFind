
# テナントマスタ
type Tenant @model @auth (
  rules: [
    {
      allow: groups,
      provider: userPools,
      groupClaim: "cognito:groups",
      groups: ["sysAdmins"],
      operations: [create, update, delete, read]
    },
    {
      allow: groups,
      provider: userPools,
      groupClaim: "cognito:groups",
      groupsField: "id",
      operations: [read]
    }
  ]
) {
  # id
  id: ID!

  # 名前
  name: String!

  # 最大ユーザー数
  maxUserCount: Int!

  # 初期パスワード
  initialPassword: String!
  
  # メールアドレス
  email: String!

  # テナント識別子
  prefix: String!

  # 座席確保情報の履歴保管日数
  retentionPeriodDays: Int!

  # 利用停止中かどうか
  isSuspended: Boolean!
}

# ユーザーマスタ
type User @model @auth (
  rules: [
    {
      allow: groups,
      provider: userPools,
      groupClaim: "cognito:groups",
      groups: ["sysAdmins"],
      operations: [read]
    },
    {
      allow: groups,
      provider: userPools,
      groupClaim: "cognito:groups",
      groupsField: "tenantId",
      operations: [read]
    },
    {
      allow: private,
      provider: identityPool,
      operations: [create, update, delete, read]
    }
  ]
) {
  # id
  id: ID!

  # テナントID
  tenantId: ID! @index(name: "byTenantId")

  # メールアドレス
  email: String!

  # 氏名
  name: String!

  # コメント
  comment: String!

  # コメント文字色
  commentForegroundColor: String

  # コメント背景色
  commentBackgroundColor: String

  # 管理者かどうか
  isAdmin: Boolean!

  # 検証待ちメールアドレス
  confirmingEmail: String
}

# フロアマスタ
type Floor @model @auth (
  rules: [
    {
      allow: groups,
      provider: userPools,
      groupClaim: "cognito:groups",
      groups: ["sysAdmins"],
      operations: [read]
    },
    {
      allow: groups,
      provider: userPools,
      groupClaim: "cognito:groups",
      groupsField: "tenantId",
      operations: [read]
    },
    {
      allow: private,
      provider: identityPool,
      operations: [create, update, delete, read]
    }
  ]
) {
  # id
  id: ID!

  # テナントID
  tenantId: ID! @index(name: "byTenantId")

  # 名前
  name: String!

  # ストレージ上での画像ファイルのパス
  imagePath: String!

  # 画像幅
  imageWidth: Int!

  # 画像高さ
  imageHeight: Int!

  # ソート順
  sortId: Int!
}

# 座席マスタ
type Seat @model @auth (
  rules: [
    {
      allow: groups,
      provider: userPools,
      groupClaim: "cognito:groups",
      groups: ["sysAdmins"],
      operations: [read]
    },
    {
      allow: groups,
      provider: userPools,
      groupClaim: "cognito:groups",
      groupsField: "tenantId",
      operations: [read]
    },
    {
      allow: private,
      provider: identityPool,
      operations: [create, update, delete, read]
    }
  ]
) {
  # id
  id: ID!

  # テナントID
  tenantId: ID! @index(name: "byTenantId")

  # Floorのid
  floorId: ID!

  # 座席名
  name: String!

  # X座標
  posX: Int!

  # Y座標
  posY: Int!
}

# 座席確保情報
type SeatOccupancy @model @auth (
  rules: [
    {
      allow: groups,
      provider: userPools,
      groupClaim: "cognito:groups",
      groups: ["sysAdmins"],
      operations: [read]
    },
    {
      allow: groups,
      provider: userPools,
      groupClaim: "cognito:groups",
      groupsField: "tenantId",
      operations: [read]
    },
    {
      allow: private,
      provider: identityPool,
      operations: [create, update, delete, read]
    }
  ]
) {
  # id
  id: ID!

  # テナントID
  tenantId: ID! @index(name: "byTenantId")

  # Seatのid
  seatId: ID!

  # 使用者のcognitoのusername(社員番号) 値が設定されていれば使用中、空なら空席
  userId: ID

  # 使用者の氏名 cognitoのnameが設定される
  userName: String

  # 日付(YYYYMMDD)
  date: String! @index(name: "byDateAndTenantId", sortKeyFields: ["tenantId"])
  
  # 座席が取得されているか解放されているか
  # true：取得中  false：解放中  	
  seatAvailability: Boolean
}

input funcCreateFloorInput {
  id: ID
  tenantId: String!
  name: String!
  imagePath: String!
  imageWidth: Int!
  imageHeight: Int!
  sortId: Int!
}

input funcUpdateFloorInput {
  id: ID!
  tenantId: String
  name: String
  imagePath: String
  imageWidth: Int
  imageHeight: Int
  sortId: Int!
}

input funcDeleteFloorInput {
  id: ID!
}

input funcCreateSeatInput {
  id: ID
  tenantId: ID!
  floorId: ID!
  name: String!
  posX: Int!
  posY: Int!
}

input funcCreateSeatOccupancyInput {
  id: ID
  tenantId: ID!
  seatId: ID!
  userId: ID
  userName: String
  date: String!
  seatAvailability: Boolean
}

input funcUpdateSeatOccupancyInput {
  id: ID
  tenantId: ID
  seatId: ID
  userId: ID
  userName: String
  date: String
  seatAvailability: Boolean
}

input funcClearSeatOccupanciesByTenantIdInput {
  id: ID!
}

input funcUpdateSeatInput {
  id: ID!
  tenantId: ID
  floorId: ID
  name: String
  posX: Int
  posY: Int
}

input funcDeleteSeatInput {
  id: ID!
}

input funcUpdateUserAttributesInput {
  accessToken: String!
  email: String
  name: String
  comment: String
  commentForegroundColor: String
  commentBackgroundColor: String
}

type funcUpdateUserAttributesResponse {
  isUpdatedEmail: Boolean!
  isUpdatedName: Boolean!
  isRequiredVerification: Boolean!
  updatedUser: User
}

input funcVerifyUserAttributeInput {
  accessToken: String!
  attributeName: String!
  code: String!
}

type Query {
  # ファイルアップロード用URLの取得
  getFileUploadUrl(filePath: String!): String
  @function(name: "refind2GetFileUploadUrl-${env}")

  # ファイルダウンロード用URLの取得
  getFileDownloadUrl(filePath: String!, expiresIn: Int): String
  @function(name: "refind2GetFileDownloadUrl-${env}")
}

type Mutation {
  # ファイル削除
  deleteFile(filePath: String!): Boolean
  @function(name: "refind2DeleteFile-${env}")

  # フロア登録
  funcCreateFloor(input: funcCreateFloorInput!): Floor
  @function(name: "refind2CreateFloor-${env}")

  # フロア更新
  funcUpdateFloor(input: funcUpdateFloorInput!): Floor
  @function(name: "refind2UpdateFloor-${env}")

  # フロア削除
  funcDeleteFloor(input: funcDeleteFloorInput!): Floor
  @function(name: "refind2DeleteFloor-${env}")

  # 座席登録
  funcCreateSeat(input: funcCreateSeatInput!): Seat
  @function(name: "refind2CreateSeat-${env}")

  # 座席更新
  funcUpdateSeat(input: funcUpdateSeatInput!): Seat
  @function(name: "refind2UpdateSeat-${env}")

  # 座席削除
  funcDeleteSeat(input: funcDeleteSeatInput!): Seat
  @function(name: "refind2DeleteSeat-${env}")

  # 座席確保情報登録
  funcCreateSeatOccupancy(input: funcCreateSeatOccupancyInput!): SeatOccupancy
  @function(name: "refind2CreateSeatOccupancy-${env}")

  # 座席解放情報更新
  funcUpdateSeatOccupancy(input: funcUpdateSeatOccupancyInput!): SeatOccupancy
  @function(name: "refind2UpdateSeatOccupancy-${env}")

  # テナント削除時の座席確保情報クリア
  funcClearSeatOccupanciesByTenantId(input: funcClearSeatOccupanciesByTenantIdInput!): [SeatOccupancy!]
  @function(name: "refind2ClearSeatOccupanciesByTenantId-${env}")

  # ユーザー情報更新
  funcUpdateUserAttributes(input: funcUpdateUserAttributesInput): funcUpdateUserAttributesResponse
  @function(name: "refind2UpdateUserAttributes-${env}")

  # ユーザー情報検証
  funcVerifyUserAttribute(input: funcVerifyUserAttributeInput): Boolean
  @function(name: "refind2VerifyUserAttribute-${env}")
}

type Subscription {
  onCreateSeatOccupancyByTenantId(tenantId: String!): SeatOccupancy
  @aws_subscribe(mutations: ["createSeatOccupancy"])
}
